plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id "org.sonarqube" version "4.4.1.3373"
	id "jacoco"


}



group = 'assessment'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	testImplementation 'com.google.code.gson:gson:2.10.1.a' 
	implementation 'com.google.code.gson:gson:2.8.7'


	compileOnly 'org.projectlombok:lombok' 
	compileOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testCompileOnly 'junit:junit:4.12' 
	testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.8.1'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}
jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

apply plugin: 'org.sonarqube'

sonarqube {
  properties {
    property "sonar.host.url", "http://localhost:9000"
	property "sonar.login", "admin"
    property "sonar.password", "newAdminPassword"
	property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"

  }
}